name: "PR Security Integration"

on:
  pull_request:
    branches: [ "main", "develop" ]
    types: [opened, synchronize, reopened]

jobs:
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Bandit on changed files
      run: |
        # Get list of changed Python files
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.py$' | tr '\n' ' ')
        if [ ! -z "$CHANGED_FILES" ]; then
          echo "Analyzing changed files: $CHANGED_FILES"
          bandit $CHANGED_FILES -f json -o bandit-pr.json --exit-zero
          bandit $CHANGED_FILES
        else
          echo "No Python files changed"
        fi

    - name: Run Safety Check
      run: |
        safety check --json --output safety-pr.json || true

    - name: Comment PR with security results
      uses: actions/github-script@v7
      if: failure()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let comment = '## 🔒 Security Analysis Results\n\n';
          
          // Read Bandit results
          try {
            const banditResults = JSON.parse(fs.readFileSync('bandit-pr.json', 'utf8'));
            if (banditResults.results && banditResults.results.length > 0) {
              comment += '### ⚠️ Bandit Security Issues Found\n\n';
              banditResults.results.forEach(issue => {
                comment += `- **${issue.test_name}** (${issue.issue_severity}): ${issue.issue_text}\n`;
                comment += `  - File: \`${issue.filename}:${issue.line_number}\`\n\n`;
              });
            }
          } catch (e) {
            console.log('No Bandit results file found');
          }
          
          comment += '\n---\n*This comment was automatically generated by the security workflow.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint

    - name: Run Black (formatting check)
      run: black --check --diff .

    - name: Run isort (import sorting check)
      run: isort --check-only --diff .

    - name: Run Flake8 (linting)
      run: flake8 .

    - name: Run MyPy (type checking)
      run: mypy . --ignore-missing-imports